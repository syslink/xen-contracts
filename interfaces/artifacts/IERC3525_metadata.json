{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "ApprovalValue",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_oldSlot",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_newSlot",
						"type": "uint256"
					}
				],
				"name": "SlotChanged",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_fromTokenId",
						"type": "uint256"
					},
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "_toTokenId",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "TransferValue",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					}
				],
				"name": "allowance",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_operator",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_tokenId",
						"type": "uint256"
					}
				],
				"name": "slotOf",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_fromTokenId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_fromTokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_toTokenId",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_value",
						"type": "uint256"
					}
				],
				"name": "transferFrom",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "valueDecimals",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"events": {
				"ApprovalValue(uint256,address,uint256)": {
					"details": "MUST emit when the approval value of a token is set or changed.",
					"params": {
						"_operator": "The operator to approve for",
						"_tokenId": "The token to approve",
						"_value": "The maximum value that `_operator` is allowed to manage"
					}
				},
				"SlotChanged(uint256,uint256,uint256)": {
					"details": "MUST emit when the slot of a token is set or changed.",
					"params": {
						"_newSlot": "The updated slot of the token",
						"_oldSlot": "The previous slot of the token",
						"_tokenId": "The token of which slot is set or changed"
					}
				},
				"TransferValue(uint256,uint256,uint256)": {
					"details": "MUST emit when value of a token is transferred to another token with the same slot,  including zero value transfers (_value == 0) as well as transfers when tokens are created  (`_fromTokenId` == 0) or destroyed (`_toTokenId` == 0).",
					"params": {
						"_fromTokenId": "The token id to transfer value from",
						"_toTokenId": "The token id to transfer value to",
						"_value": "The transferred value"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"allowance(uint256,address)": {
					"params": {
						"_operator": "The address of an operator",
						"_tokenId": "The token for which to query the allowance"
					},
					"returns": {
						"_0": "The current approval value of `_tokenId` that `_operator` is allowed to manage"
					}
				},
				"approve(uint256,address,uint256)": {
					"details": "MUST revert unless caller is the current owner, an authorized operator, or the approved  address for `_tokenId`.  MUST emit the ApprovalValue event.",
					"params": {
						"_operator": "The operator to be approved",
						"_tokenId": "The token to approve",
						"_value": "The maximum value of `_toTokenId` that `_operator` is allowed to manage"
					}
				},
				"balanceOf(uint256)": {
					"params": {
						"_tokenId": "The token for which to query the balance"
					},
					"returns": {
						"_0": "The value of `_tokenId`"
					}
				},
				"slotOf(uint256)": {
					"params": {
						"_tokenId": "The identifier for a token"
					},
					"returns": {
						"_0": "The slot of the token"
					}
				},
				"transferFrom(uint256,address,uint256)": {
					"details": "This function MUST create a new EIP-3525 token with the same slot for `_to`,   or find an existing token with the same slot owned by `_to`, to receive the transferred value.  MUST revert if `_fromTokenId` is zero token id or does not exist.  MUST revert if `_to` is zero address.  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the  operator.  MUST emit `Transfer` and `TransferValue` events.",
					"params": {
						"_fromTokenId": "The token to transfer value from",
						"_to": "The address to transfer value to",
						"_value": "The transferred value"
					},
					"returns": {
						"_0": "ID of the token which receives the transferred value"
					}
				},
				"transferFrom(uint256,uint256,uint256)": {
					"details": "Caller MUST be the current owner, an authorized operator or an operator who has been  approved the whole `_fromTokenId` or part of it.  MUST revert if `_fromTokenId` or `_toTokenId` is zero token id or does not exist.  MUST revert if slots of `_fromTokenId` and `_toTokenId` do not match.  MUST revert if `_value` exceeds the balance of `_fromTokenId` or its allowance to the  operator.  MUST emit `TransferValue` event.",
					"params": {
						"_fromTokenId": "The token to transfer value from",
						"_toTokenId": "The token to transfer value to",
						"_value": "The transferred value"
					}
				},
				"valueDecimals()": {
					"returns": {
						"_0": "The number of decimals for value"
					}
				}
			},
			"title": "EIP-3525 Semi-Fungible Token Standard Note: the EIP-165 identifier for this interface is 0xd5358140.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"allowance(uint256,address)": {
					"notice": "Get the maximum value of a token that an operator is allowed to manage."
				},
				"approve(uint256,address,uint256)": {
					"notice": "Allow an operator to manage the value of a token, up to the `_value`."
				},
				"balanceOf(uint256)": {
					"notice": "Get the value of a token."
				},
				"slotOf(uint256)": {
					"notice": "Get the slot of a token."
				},
				"transferFrom(uint256,address,uint256)": {
					"notice": "Transfer value from a specified token to an address. The caller should confirm that  `_to` is capable of receiving EIP-3525 tokens."
				},
				"transferFrom(uint256,uint256,uint256)": {
					"notice": "Transfer value from a specified token to another specified token with the same slot."
				},
				"valueDecimals()": {
					"notice": "Get the number of decimals the token uses for value - e.g. 6, means the user  representation of the value of a token can be calculated by dividing it by 1,000,000.  Considering the compatibility with third-party wallets, this function is defined as  `valueDecimals()` instead of `decimals()` to avoid conflict with EIP-20 tokens."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"XEN-Ex/interfaces/IERC3525.sol": "IERC3525"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"XEN-Ex/interfaces/IERC3525.sol": {
			"keccak256": "0xa665553e02a09333266b5299884ad4d2e21de35817ceb6a04718f5fa2a7c4896",
			"urls": [
				"bzz-raw://a73e0a7ab688ac2d8acfecf96fecc59f3e9c7ab13b2b568d68e829f4cbd53c5f",
				"dweb:/ipfs/QmW4XcFpDWCjEdBGDSGNiT9j34RXcvGixqNwoKYbpiqFiL"
			]
		}
	},
	"version": 1
}